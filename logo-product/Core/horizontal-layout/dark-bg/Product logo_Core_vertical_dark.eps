%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 236 72
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 236 72
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
104.59641 56.476784 m
105.72797 56.476784 106.70238 56.885406 107.51962 57.702652 c
108.33687 58.519894 108.74549 59.494301 108.74549 60.62587 c
108.74549 61.757442 108.33687 62.73185 107.51962 63.549091 c
106.70238 64.366341 105.72797 64.774956 104.59641 64.774956 c
103.46484 64.774956 102.49043 64.366341 101.67319 63.549091 c
100.85594 62.73185 100.44732 61.757442 100.44732 60.62587 c
100.44732 59.494301 100.85594 58.519894 101.67319 57.702652 c
102.49043 56.885406 103.46484 56.476784 104.59641 56.476784 c
h
92.903519 1.7842587 m
95.837219 1.7842587 98.41468 2.4233859 100.63591 3.7016404 c
102.85714 4.9798946 104.60688 6.7296367 105.88514 8.9508657 c
107.16339 11.172094 107.80252 13.728603 107.80252 16.620392 c
107.80252 16.620392 l
107.80252 47.675686 l
107.80252 48.639618 107.50915 49.414951 106.92241 50.00169 c
106.33567 50.588432 105.56033 50.881802 104.59641 50.881802 c
103.67439 50.881802 102.90953 50.588432 102.30183 50.00169 c
101.69414 49.414951 101.39029 48.639618 101.39029 47.675686 c
101.39029 47.675686 l
101.39029 16.620392 l
101.39029 14.985903 101.02358 13.540009 100.29015 12.282709 c
99.556732 11.02541 98.561371 10.030047 97.30407 9.2966232 c
96.046768 8.5631981 94.579918 8.1964855 92.903519 8.1964855 c
91.981499 8.1964855 91.227119 7.9031157 90.640381 7.3163762 c
90.053642 6.7296367 89.760269 5.9543018 89.760269 4.9903722 c
89.760269 4.0683527 90.053642 3.3034956 90.640381 2.6958008 c
91.227119 2.0881062 91.981499 1.7842587 92.903519 1.7842587 c
h
130.30815 56.476784 m
131.43973 56.476784 132.41414 56.885406 133.23138 57.702652 c
134.04861 58.519894 134.45724 59.494301 134.45724 60.62587 c
134.45724 61.757442 134.04861 62.73185 133.23138 63.549091 c
132.41414 64.366341 131.43973 64.774956 130.30815 64.774956 c
129.17659 64.774956 128.20218 64.366341 127.38493 63.549091 c
126.56769 62.73185 126.15907 61.757442 126.15907 60.62587 c
126.15907 59.494301 126.56769 58.519894 127.38493 57.702652 c
128.20218 56.885406 129.17659 56.476784 130.30815 56.476784 c
h
130.30815 16.494661 m
131.27208 16.494661 132.04742 16.79851 132.63416 17.406204 c
133.2209 18.013899 133.51427 18.778755 133.51427 19.700775 c
133.51427 19.700775 l
133.51427 47.675686 l
133.51427 48.639618 133.2209 49.414951 132.63416 50.00169 c
132.04742 50.588432 131.27208 50.881802 130.30815 50.881802 c
129.38614 50.881802 128.62128 50.588432 128.01358 50.00169 c
127.40589 49.414951 127.10204 48.639618 127.10204 47.675686 c
127.10204 47.675686 l
127.10204 19.700775 l
127.10204 18.778755 127.40589 18.013899 128.01358 17.406204 c
128.62128 16.79851 129.38614 16.494661 130.30815 16.494661 c
h
181.22876 16.431797 m
182.15079 16.431797 182.91563 16.735643 183.52333 17.34334 c
184.13103 17.951035 184.43488 18.715891 184.43488 19.637911 c
184.43488 19.637911 l
184.43488 35.102692 l
184.43488 38.581223 183.7748 41.514919 182.45462 43.90379 c
181.13446 46.29266 179.33234 48.105267 177.04823 49.34161 c
174.76414 50.577953 172.17621 51.196125 169.28441 51.196125 c
166.51836 51.196125 164.02472 50.588432 161.80348 49.373043 c
160.69287 48.765347 159.70013 48.050259 158.82526 47.227776 c
158.59691 47.007027 l
158.59737 47.675686 l
158.59737 48.565468 158.3474 49.294552 157.84746 49.862942 c
157.71725 50.00169 l
157.13052 50.588432 156.35519 50.881802 155.39125 50.881802 c
154.46924 50.881802 153.70438 50.588432 153.09668 50.00169 c
152.489 49.414951 152.18515 48.639618 152.18515 47.675686 c
152.18515 47.675686 l
152.18515 19.637911 l
152.18515 18.715891 152.489 17.951035 153.09668 17.34334 c
153.70438 16.735643 154.46924 16.431797 155.39125 16.431797 c
156.35519 16.431797 157.13052 16.735643 157.71725 17.34334 c
158.304 17.951035 158.59737 18.715891 158.59737 19.637911 c
158.59737 19.637911 l
158.59691 37.365337 l
158.60297 37.673592 l
158.65138 38.996922 159.0146 40.186466 159.69261 41.242226 c
159.85468 41.483486 l
160.69287 42.677921 161.82443 43.631374 163.24937 44.343845 c
164.67432 45.056313 166.26689 45.412548 168.02711 45.412548 c
169.95497 45.412548 171.66281 45.045837 173.1506 44.312412 c
174.63841 43.578987 175.82237 42.457893 176.70248 40.949135 c
177.5826 39.440376 178.02264 37.491562 178.02264 35.102692 c
178.02264 35.102692 l
178.02264 19.637911 l
178.02264 18.715891 178.32649 17.951035 178.93419 17.34334 c
179.54189 16.735643 180.30675 16.431797 181.22876 16.431797 c
h
216.1188 16.243202 m
219.17822 16.243202 221.92332 17.008059 224.35411 18.537773 c
225.74312 19.411896 226.96451 20.463923 228.01823 21.693851 c
228.25142 21.973257 l
228.25174 19.637911 l
228.25174 18.786816 228.51064 18.069633 229.02844 17.486366 c
229.16328 17.34334 l
229.77098 16.735643 230.53583 16.431797 231.45786 16.431797 c
232.37987 16.431797 233.14473 16.735643 233.75243 17.34334 c
234.36012 17.951035 234.66397 18.715891 234.66397 19.637911 c
234.66397 19.637911 l
234.66397 33.656799 l
234.66397 36.967686 233.89911 39.943295 232.3694 42.583626 c
230.83968 45.223953 228.7756 47.308975 226.1772 48.838688 c
223.57878 50.368404 220.64508 51.133263 217.3761 51.133263 c
214.10712 51.133263 211.16295 50.368404 208.54356 48.838688 c
205.92419 47.308975 203.84966 45.223953 202.31993 42.583626 c
200.79022 39.943295 200.02536 36.967686 200.02536 33.656799 c
200.02536 30.345911 200.72736 27.380779 202.13135 24.761406 c
203.53532 22.142033 205.45271 20.067488 207.88348 18.537773 c
210.31427 17.008059 213.05937 16.243202 216.1188 16.243202 c
h
217.3761 21.901049 m
215.28059 21.901049 213.38417 22.414446 211.68681 23.44124 c
209.98946 24.468037 208.64835 25.872021 207.66345 27.653194 c
206.67857 29.434368 206.18613 31.43557 206.18613 33.656799 c
206.18613 35.919937 206.67857 37.942093 207.66345 39.72327 c
208.64835 41.504444 209.98946 42.908428 211.68681 43.935223 c
213.38417 44.962017 215.28059 45.475414 217.3761 45.475414 c
219.5135 45.475414 221.42041 44.962017 223.0968 43.935223 c
224.77321 42.908428 226.09337 41.504444 227.0573 39.72327 c
228.02122 37.942093 228.5032 35.919937 228.5032 33.656799 c
228.5032 31.43557 228.02122 29.434368 227.0573 27.653194 c
226.09337 25.872021 224.77321 24.468037 223.0968 23.44124 c
221.42041 22.414446 219.5135 21.901049 217.3761 21.901049 c
h
W
0 0 236 72 rc
84.760269 69.774956 m
239.66397 69.774956 l
239.66397 -3.2157412 l
84.760269 -3.2157412 l
h
f
Q
1.6725979 w
q
0 0 236 72 rc
1 0 0 -1 89.760269 64.774956 cm
14.836133 8.2981758 m
15.967703 8.2981758 16.94211 7.889554 17.759354 7.072309 c
18.576599 6.2550645 18.985222 5.2806578 18.985222 4.1490879 c
18.985222 3.0175185 18.576599 2.0431116 17.759354 1.2258669 c
16.94211 0.40862232 15.967703 0 14.836133 0 c
13.704564 0 12.730157 0.40862232 11.912912 1.2258669 c
11.095667 2.0431116 10.687045 3.0175185 10.687045 4.1490879 c
10.687045 5.2806578 11.095667 6.2550645 11.912912 7.072309 c
12.730157 7.889554 13.704564 8.2981758 14.836133 8.2981758 c
h
3.1432486 62.9907 m
6.0769472 62.9907 8.6544113 62.351574 10.87564 61.073318 c
13.096869 59.795063 14.846611 58.045322 16.124865 55.824093 c
17.40312 53.602863 18.042246 51.046356 18.042246 48.154568 c
18.042246 48.154568 l
18.042246 17.099272 l
18.042246 16.135342 17.748877 15.360008 17.162138 14.773268 c
16.575397 14.186528 15.800063 13.893159 14.836133 13.893159 c
13.914114 13.893159 13.149257 14.186528 12.541562 14.773268 c
11.933867 15.360008 11.630019 16.135342 11.630019 17.099272 c
11.630019 17.099272 l
11.630019 48.154568 l
11.630019 49.789059 11.263308 51.234951 10.529882 52.492252 c
9.7964582 53.74955 8.801096 54.744911 7.5437965 55.478336 c
6.2864971 56.211761 4.8196478 56.578472 3.1432486 56.578472 c
2.2212291 56.578472 1.4668493 56.871845 0.88010961 57.458584 c
0.29336986 58.045322 0 58.82066 0 59.784588 c
0 60.706608 0.29336986 61.471462 0.88010961 62.079159 c
1.4668493 62.686855 2.2212291 62.9907 3.1432486 62.9907 c
h
40.547886 8.2981758 m
41.679455 8.2981758 42.653862 7.889554 43.471104 7.072309 c
44.288349 6.2550645 44.696972 5.2806578 44.696972 4.1490879 c
44.696972 3.0175185 44.288349 2.0431116 43.471104 1.2258669 c
42.653862 0.40862232 41.679455 0 40.547886 0 c
39.416313 0 38.441906 0.40862232 37.624664 1.2258669 c
36.807419 2.0431116 36.398796 3.0175185 36.398796 4.1490879 c
36.398796 5.2806578 36.807419 6.2550645 37.624664 7.072309 c
38.441906 7.889554 39.416313 8.2981758 40.547886 8.2981758 c
h
40.547886 48.280296 m
41.511814 48.280296 42.287148 47.976452 42.87389 47.368755 c
43.460629 46.761063 43.753998 45.996204 43.753998 45.074184 c
43.753998 45.074184 l
43.753998 17.099272 l
43.753998 16.135342 43.460629 15.360008 42.87389 14.773268 c
42.287148 14.186528 41.511814 13.893159 40.547886 13.893159 c
39.625866 13.893159 38.861008 14.186528 38.253311 14.773268 c
37.645618 15.360008 37.34177 16.135342 37.34177 17.099272 c
37.34177 17.099272 l
37.34177 45.074184 l
37.34177 45.996204 37.645618 46.761063 38.253311 47.368755 c
38.861008 47.976452 39.625866 48.280296 40.547886 48.280296 c
h
91.468491 48.343163 m
92.390511 48.343163 93.155365 48.039314 93.763062 47.431622 c
94.370758 46.823925 94.674599 46.059067 94.674599 45.137051 c
94.674599 45.137051 l
94.674599 29.672266 l
94.674599 26.193737 94.014519 23.260038 92.694359 20.87117 c
91.374191 18.482302 89.57206 16.669695 87.287971 15.433351 c
85.003876 14.197006 82.415932 13.578834 79.524147 13.578834 c
76.758087 13.578834 74.264442 14.186528 72.043213 15.401917 c
70.932602 16.009613 69.939857 16.724701 69.064987 17.547186 c
68.836639 17.767931 l
68.837097 17.099272 l
68.837097 16.209492 68.587128 15.480406 68.087181 14.912018 c
67.956993 14.773268 l
67.370247 14.186528 66.594917 13.893159 65.630989 13.893159 c
64.708969 13.893159 63.944111 14.186528 63.336414 14.773268 c
62.728718 15.360008 62.424873 16.135342 62.424873 17.099272 c
62.424873 17.099272 l
62.424873 45.137051 l
62.424873 46.059067 62.728718 46.823925 63.336414 47.431622 c
63.944111 48.039314 64.708969 48.343163 65.630989 48.343163 c
66.594917 48.343163 67.370247 48.039314 67.956993 47.431622 c
68.543732 46.823925 68.837097 46.059067 68.837097 45.137051 c
68.837097 45.137051 l
68.836639 27.409622 l
68.84269 27.101368 l
68.891113 25.778038 69.254333 24.588493 69.93235 23.532734 c
70.094398 23.291471 l
70.932602 22.097036 72.064171 21.143585 73.489105 20.431116 c
74.914047 19.718645 76.506622 19.362411 78.266846 19.362411 c
80.194702 19.362411 81.902534 19.729124 83.390343 20.462547 c
84.878143 21.195972 86.062103 22.317064 86.942207 23.825825 c
87.822319 25.334583 88.262375 27.283398 88.262375 29.672266 c
88.262375 29.672266 l
88.262375 45.137051 l
88.262375 46.059067 88.566223 46.823925 89.17392 47.431622 c
89.781609 48.039314 90.546471 48.343163 91.468491 48.343163 c
h
126.35853 48.531757 m
129.41795 48.531757 132.16306 47.766899 134.59384 46.237186 c
135.98285 45.363064 137.20422 44.311039 138.25797 43.081108 c
138.49113 42.801704 l
138.49147 45.137051 l
138.49147 45.988144 138.75037 46.705326 139.26816 47.288593 c
139.403 47.431622 l
140.0107 48.039314 140.77556 48.343163 141.69759 48.343163 c
142.6196 48.343163 143.38446 48.039314 143.99216 47.431622 c
144.59984 46.823925 144.90369 46.059067 144.90369 45.137051 c
144.90369 45.137051 l
144.90369 31.11816 l
144.90369 27.807272 144.13884 24.831663 142.60912 22.191334 c
141.07941 19.551006 139.01534 17.465984 136.41692 15.93627 c
133.8185 14.406556 130.8848 13.641699 127.61582 13.641699 c
124.34685 13.641699 121.40267 14.406556 118.78329 15.93627 c
116.16393 17.465984 114.08938 19.551006 112.55966 22.191334 c
111.02995 24.831663 110.26509 27.807272 110.26509 31.11816 c
110.26509 34.42905 110.96709 37.39418 112.37107 40.013554 c
113.77505 42.632927 115.69244 44.70747 118.12321 46.237186 c
120.55399 47.766899 123.2991 48.531757 126.35853 48.531757 c
h
127.61582 42.873909 m
125.52032 42.873909 123.6239 42.360512 121.92654 41.333717 c
120.22919 40.306923 118.88807 38.902939 117.90319 37.121765 c
116.9183 35.340591 116.42586 33.33939 116.42586 31.11816 c
116.42586 28.855022 116.9183 26.832865 117.90319 25.051691 c
118.88807 23.270517 120.22919 21.866533 121.92654 20.839737 c
123.6239 19.812943 125.52032 19.299545 127.61582 19.299545 c
129.75323 19.299545 131.66014 19.812943 133.33653 20.839737 c
135.01294 21.866533 136.3331 23.270517 137.29703 25.051691 c
138.26096 26.832865 138.74292 28.855022 138.74292 31.11816 c
138.74292 33.33939 138.26096 35.340591 137.29703 37.121765 c
136.3331 38.902939 135.01294 40.306923 133.33653 41.333717 c
131.66014 42.360512 129.75323 42.873909 127.61582 42.873909 c
h
S
50 0 0 28 7 14 cm
BI
/Width 150
/Height 84
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/Interpolate true
/DataSource cg_aiproc
ID
JcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELb
JcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELb
JcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELb
JcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELb
JcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELb
JcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELb
JcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELb
JcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELb
JcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELb
JcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELb
JcC<$JcELbJcC<$JcELbJcC<$JcELbJcC<$JcELbJ,
~> %APLeod
EI
45 0 0 4 12 42 cm
BI
/Width 135
/Height 12
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/Interpolate true
/DataSource cg_aiproc
ID
JcC<$JcG*:JcC<$JcG*:JcC<$JcG*:JcC<$JcG*:JcC<$JcG*:JcC<$JcG*:JcC<$JcG*:JcC<$JcG*:
JcC<$JcG*:JcC<$JcG*:JcC<$JcG*:JcC<$JcG*:J,
~> %APLeod
EI
Q
q
58.661919 20.20916 m
68.837425 11.083193 l
70.945793 9.1922741 71.116417 5.9609423 69.218796 3.860863 c
67.344749 1.7868789 64.148079 1.5972062 62.040112 3.4200265 c
61.969334 3.4823551 l
51.223587 13.121394 l
54.045269 15.101091 56.554161 17.493013 58.661919 20.20916 c
h
W
0 0 236 72 rc
46.223587 25.20916 m
75.537483 25.20916 l
75.537483 -2.8304126 l
46.223587 -2.8304126 l
h
f
Q
q
32.800327 66.416504 m
46.788815 65.576187 57.140297 53.531628 56.580757 39.806431 c
55.741447 25.801126 43.711349 15.437202 30.00263 15.997415 c
16.014141 16.837732 5.6626596 28.882294 6.222199 42.607491 c
6.7817388 56.332687 19.091608 66.976723 32.800327 66.416504 c
33.172028 71.639412 m
16.419542 72.553665 1.7991904 59.754036 0.88541842 42.992611 c
-0.028353553 26.231186 12.764454 11.603032 29.516941 10.688773 c
46.269428 9.7745132 60.58519 22.574146 61.803551 39.335571 c
63.021912 56.096996 49.924515 70.420395 33.172028 71.639412 c
h
W
0 0 236 72 rc
-4.1606379 76.685493 m
66.882156 76.685493 l
66.882156 5.6426921 l
-4.1606379 5.6426921 l
h
f
ep
end
%%Trailer
%%EOF
