%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 235 71
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 235 71
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0.57647061 0.60784316 sc
q
103.75704 55.786392 m
104.88861 55.786392 105.86302 56.195015 106.68027 57.01226 c
107.49751 57.829502 107.90613 58.803909 107.90613 59.935478 c
107.90613 61.067051 107.49751 62.041458 106.68027 62.8587 c
105.86302 63.675945 104.88861 64.084572 103.75704 64.084572 c
102.62547 64.084572 101.65107 63.675945 100.83382 62.8587 c
100.01658 62.041458 99.607956 61.067051 99.607956 59.935478 c
99.607956 58.803909 100.01658 57.829502 100.83382 57.01226 c
101.65107 56.195015 102.62547 55.786392 103.75704 55.786392 c
h
92.064156 1.0938673 m
94.997856 1.0938673 97.575317 1.7329944 99.796547 3.0112488 c
102.01778 4.2895031 103.76752 6.0392451 105.04578 8.2604742 c
106.32403 10.481703 106.96316 13.038212 106.96316 15.93 c
106.96316 15.93 l
106.96316 46.985294 l
106.96316 47.949226 106.66978 48.72456 106.08305 49.311298 c
105.49631 49.898041 104.72097 50.19141 103.75704 50.19141 c
102.83502 50.19141 102.07017 49.898041 101.46247 49.311298 c
100.85477 48.72456 100.55093 47.949226 100.55093 46.985294 c
100.55093 46.985294 l
100.55093 15.93 l
100.55093 14.295511 100.18422 12.849617 99.45079 11.592318 c
98.717369 10.335018 97.722008 9.3396559 96.464706 8.6062317 c
95.207405 7.8728065 93.740555 7.5060945 92.064156 7.5060945 c
91.142136 7.5060945 90.387756 7.2127242 89.801018 6.6259847 c
89.214279 6.0392451 88.920906 5.2639103 88.920906 4.2999806 c
88.920906 3.3779612 89.214279 2.6131041 89.801018 2.0054092 c
90.387756 1.3977146 91.142136 1.0938673 92.064156 1.0938673 c
h
129.4688 55.786392 m
130.60036 55.786392 131.57477 56.195015 132.39201 57.01226 c
133.20926 57.829502 133.61789 58.803909 133.61789 59.935478 c
133.61789 61.067051 133.20926 62.041458 132.39201 62.8587 c
131.57477 63.675945 130.60036 64.084572 129.4688 64.084572 c
128.33722 64.084572 127.36282 63.675945 126.54557 62.8587 c
125.72832 62.041458 125.3197 61.067051 125.3197 59.935478 c
125.3197 58.803909 125.72832 57.829502 126.54557 57.01226 c
127.36282 56.195015 128.33722 55.786392 129.4688 55.786392 c
h
129.4688 15.804271 m
130.43272 15.804271 131.20805 16.108118 131.7948 16.715813 c
132.38153 17.323507 132.67491 18.088364 132.67491 19.010384 c
132.67491 19.010384 l
132.67491 46.985294 l
132.67491 47.949226 132.38153 48.72456 131.7948 49.311298 c
131.20805 49.898041 130.43272 50.19141 129.4688 50.19141 c
128.54677 50.19141 127.78191 49.898041 127.17422 49.311298 c
126.56653 48.72456 126.26268 47.949226 126.26268 46.985294 c
126.26268 46.985294 l
126.26268 19.010384 l
126.26268 18.088364 126.56653 17.323507 127.17422 16.715813 c
127.78191 16.108118 128.54677 15.804271 129.4688 15.804271 c
h
180.3894 15.741405 m
181.31142 15.741405 182.07628 16.045254 182.68398 16.652948 c
183.29167 17.260643 183.5955 18.025499 183.5955 18.947519 c
183.5955 18.947519 l
183.5955 34.4123 l
183.5955 37.890831 182.93542 40.824528 181.61526 43.213398 c
180.2951 45.602268 178.49297 47.414875 176.20888 48.651218 c
173.92479 49.887562 171.33684 50.505733 168.44505 50.505733 c
165.679 50.505733 163.18535 49.898041 160.96413 48.682652 c
159.8535 48.074955 158.86076 47.359867 157.9859 46.537384 c
157.75755 46.316635 l
157.75801 46.985294 l
157.75801 47.875076 157.50804 48.60416 157.00809 49.17255 c
156.8779 49.311298 l
156.29115 49.898041 155.51582 50.19141 154.5519 50.19141 c
153.62988 50.19141 152.86502 49.898041 152.25732 49.311298 c
151.64963 48.72456 151.34578 47.949226 151.34578 46.985294 c
151.34578 46.985294 l
151.34578 18.947519 l
151.34578 18.025499 151.64963 17.260643 152.25732 16.652948 c
152.86502 16.045254 153.62988 15.741405 154.5519 15.741405 c
155.51582 15.741405 156.29115 16.045254 156.8779 16.652948 c
157.46465 17.260643 157.75801 18.025499 157.75801 18.947519 c
157.75801 18.947519 l
157.75755 36.674946 l
157.7636 36.9832 l
157.81203 38.30653 158.17525 39.496075 158.85326 40.551834 c
159.0153 40.793095 l
159.8535 41.98753 160.98508 42.940983 162.41002 43.653454 c
163.83496 44.365921 165.42754 44.722157 167.18776 44.722157 c
169.11562 44.722157 170.82344 44.355446 172.31125 43.622021 c
173.79906 42.888596 174.98302 41.767502 175.86311 40.258743 c
176.74323 38.749985 177.18329 36.80117 177.18329 34.4123 c
177.18329 34.4123 l
177.18329 18.947519 l
177.18329 18.025499 177.48714 17.260643 178.09483 16.652948 c
178.70251 16.045254 179.46738 15.741405 180.3894 15.741405 c
h
215.27943 15.552811 m
218.33887 15.552811 221.08397 16.317667 223.51474 17.847382 c
224.90376 18.721504 226.12514 19.773531 227.17888 21.00346 c
227.41205 21.282866 l
227.41237 18.947519 l
227.41237 18.096424 227.67128 17.379242 228.18907 16.795975 c
228.32391 16.652948 l
228.93161 16.045254 229.69647 15.741405 230.61848 15.741405 c
231.54051 15.741405 232.30536 16.045254 232.91306 16.652948 c
233.52075 17.260643 233.8246 18.025499 233.8246 18.947519 c
233.8246 18.947519 l
233.8246 32.966408 l
233.8246 36.277294 233.05974 39.252903 231.53003 41.893234 c
230.00032 44.533562 227.93625 46.618584 225.33783 48.148296 c
222.73941 49.678013 219.80571 50.442871 216.53673 50.442871 c
213.26776 50.442871 210.32358 49.678013 207.70421 48.148296 c
205.08484 46.618584 203.01028 44.533562 201.48058 41.893234 c
199.95087 39.252903 199.186 36.277294 199.186 32.966408 c
199.186 29.655519 199.888 26.690388 201.29198 24.071014 c
202.69597 21.451641 204.61334 19.377096 207.04413 17.847382 c
209.4749 16.317667 212.22 15.552811 215.27943 15.552811 c
h
216.53673 21.210657 m
214.44124 21.210657 212.54482 21.724054 210.84746 22.750851 c
209.1501 23.777645 207.80898 25.181629 206.8241 26.962803 c
205.83922 28.743977 205.34677 30.745178 205.34677 32.966408 c
205.34677 35.229546 205.83922 37.251701 206.8241 39.032879 c
207.80898 40.814053 209.1501 42.218037 210.84746 43.244831 c
212.54482 44.271626 214.44124 44.785023 216.53673 44.785023 c
218.67415 44.785023 220.58105 44.271626 222.25745 43.244831 c
223.93385 42.218037 225.25401 40.814053 226.21794 39.032879 c
227.18187 37.251701 227.66383 35.229546 227.66383 32.966408 c
227.66383 30.745178 227.18187 28.743977 226.21794 26.962803 c
225.25401 25.181629 223.93385 23.777645 222.25745 22.750851 c
220.58105 21.724054 218.67415 21.210657 216.53673 21.210657 c
h
W
0 0 235 71 rc
83.920906 69.084572 m
238.8246 69.084572 l
238.8246 -3.9061327 l
83.920906 -3.9061327 l
h
f
Q
1.6725979 w
q
0 0 235 71 rc
1 0 0 -1 88.920906 64.084572 cm
14.836133 8.2981758 m
15.967703 8.2981758 16.94211 7.889554 17.759354 7.072309 c
18.576599 6.2550645 18.985222 5.2806578 18.985222 4.1490879 c
18.985222 3.0175185 18.576599 2.0431116 17.759354 1.2258669 c
16.94211 0.40862232 15.967703 0 14.836133 0 c
13.704564 0 12.730157 0.40862232 11.912912 1.2258669 c
11.095667 2.0431116 10.687045 3.0175185 10.687045 4.1490879 c
10.687045 5.2806578 11.095667 6.2550645 11.912912 7.072309 c
12.730157 7.889554 13.704564 8.2981758 14.836133 8.2981758 c
h
3.1432486 62.9907 m
6.0769472 62.9907 8.6544113 62.351574 10.87564 61.073318 c
13.096869 59.795063 14.846611 58.045322 16.124865 55.824093 c
17.40312 53.602863 18.042246 51.046356 18.042246 48.154568 c
18.042246 48.154568 l
18.042246 17.099272 l
18.042246 16.135342 17.748877 15.360008 17.162138 14.773268 c
16.575397 14.186528 15.800063 13.893159 14.836133 13.893159 c
13.914114 13.893159 13.149257 14.186528 12.541562 14.773268 c
11.933867 15.360008 11.630019 16.135342 11.630019 17.099272 c
11.630019 17.099272 l
11.630019 48.154568 l
11.630019 49.789059 11.263308 51.234951 10.529882 52.492252 c
9.7964582 53.74955 8.801096 54.744911 7.5437965 55.478336 c
6.2864971 56.211761 4.8196478 56.578472 3.1432486 56.578472 c
2.2212291 56.578472 1.4668493 56.871845 0.88010961 57.458584 c
0.29336986 58.045322 0 58.82066 0 59.784588 c
0 60.706608 0.29336986 61.471462 0.88010961 62.079159 c
1.4668493 62.686855 2.2212291 62.9907 3.1432486 62.9907 c
h
40.547886 8.2981758 m
41.679455 8.2981758 42.653862 7.889554 43.471104 7.072309 c
44.288349 6.2550645 44.696972 5.2806578 44.696972 4.1490879 c
44.696972 3.0175185 44.288349 2.0431116 43.471104 1.2258669 c
42.653862 0.40862232 41.679455 0 40.547886 0 c
39.416313 0 38.441906 0.40862232 37.624664 1.2258669 c
36.807419 2.0431116 36.398796 3.0175185 36.398796 4.1490879 c
36.398796 5.2806578 36.807419 6.2550645 37.624664 7.072309 c
38.441906 7.889554 39.416313 8.2981758 40.547886 8.2981758 c
h
40.547886 48.280296 m
41.511814 48.280296 42.287148 47.976452 42.87389 47.368755 c
43.460629 46.761063 43.753998 45.996204 43.753998 45.074184 c
43.753998 45.074184 l
43.753998 17.099272 l
43.753998 16.135342 43.460629 15.360008 42.87389 14.773268 c
42.287148 14.186528 41.511814 13.893159 40.547886 13.893159 c
39.625866 13.893159 38.861008 14.186528 38.253311 14.773268 c
37.645618 15.360008 37.34177 16.135342 37.34177 17.099272 c
37.34177 17.099272 l
37.34177 45.074184 l
37.34177 45.996204 37.645618 46.761063 38.253311 47.368755 c
38.861008 47.976452 39.625866 48.280296 40.547886 48.280296 c
h
91.468491 48.343163 m
92.390511 48.343163 93.155365 48.039314 93.763062 47.431622 c
94.370758 46.823925 94.674599 46.059067 94.674599 45.137051 c
94.674599 45.137051 l
94.674599 29.672266 l
94.674599 26.193737 94.014519 23.260038 92.694359 20.87117 c
91.374191 18.482302 89.57206 16.669695 87.287971 15.433351 c
85.003876 14.197006 82.415932 13.578834 79.524147 13.578834 c
76.758087 13.578834 74.264442 14.186528 72.043213 15.401917 c
70.932602 16.009613 69.939857 16.724701 69.064987 17.547186 c
68.836639 17.767931 l
68.837097 17.099272 l
68.837097 16.209492 68.587128 15.480406 68.087181 14.912018 c
67.956993 14.773268 l
67.370247 14.186528 66.594917 13.893159 65.630989 13.893159 c
64.708969 13.893159 63.944111 14.186528 63.336414 14.773268 c
62.728718 15.360008 62.424873 16.135342 62.424873 17.099272 c
62.424873 17.099272 l
62.424873 45.137051 l
62.424873 46.059067 62.728718 46.823925 63.336414 47.431622 c
63.944111 48.039314 64.708969 48.343163 65.630989 48.343163 c
66.594917 48.343163 67.370247 48.039314 67.956993 47.431622 c
68.543732 46.823925 68.837097 46.059067 68.837097 45.137051 c
68.837097 45.137051 l
68.836639 27.409622 l
68.84269 27.101368 l
68.891113 25.778038 69.254333 24.588493 69.93235 23.532734 c
70.094398 23.291471 l
70.932602 22.097036 72.064171 21.143585 73.489105 20.431116 c
74.914047 19.718645 76.506622 19.362411 78.266846 19.362411 c
80.194702 19.362411 81.902534 19.729124 83.390343 20.462547 c
84.878143 21.195972 86.062103 22.317064 86.942207 23.825825 c
87.822319 25.334583 88.262375 27.283398 88.262375 29.672266 c
88.262375 29.672266 l
88.262375 45.137051 l
88.262375 46.059067 88.566223 46.823925 89.17392 47.431622 c
89.781609 48.039314 90.546471 48.343163 91.468491 48.343163 c
h
126.35853 48.531757 m
129.41795 48.531757 132.16306 47.766899 134.59384 46.237186 c
135.98285 45.363064 137.20422 44.311039 138.25797 43.081108 c
138.49113 42.801704 l
138.49147 45.137051 l
138.49147 45.988144 138.75037 46.705326 139.26816 47.288593 c
139.403 47.431622 l
140.0107 48.039314 140.77556 48.343163 141.69759 48.343163 c
142.6196 48.343163 143.38446 48.039314 143.99216 47.431622 c
144.59984 46.823925 144.90369 46.059067 144.90369 45.137051 c
144.90369 45.137051 l
144.90369 31.11816 l
144.90369 27.807272 144.13884 24.831663 142.60912 22.191334 c
141.07941 19.551006 139.01534 17.465984 136.41692 15.93627 c
133.8185 14.406556 130.8848 13.641699 127.61582 13.641699 c
124.34685 13.641699 121.40267 14.406556 118.78329 15.93627 c
116.16393 17.465984 114.08938 19.551006 112.55966 22.191334 c
111.02995 24.831663 110.26509 27.807272 110.26509 31.11816 c
110.26509 34.42905 110.96709 37.39418 112.37107 40.013554 c
113.77505 42.632927 115.69244 44.70747 118.12321 46.237186 c
120.55399 47.766899 123.2991 48.531757 126.35853 48.531757 c
h
127.61582 42.873909 m
125.52032 42.873909 123.6239 42.360512 121.92654 41.333717 c
120.22919 40.306923 118.88807 38.902939 117.90319 37.121765 c
116.9183 35.340591 116.42586 33.33939 116.42586 31.11816 c
116.42586 28.855022 116.9183 26.832865 117.90319 25.051691 c
118.88807 23.270517 120.22919 21.866533 121.92654 20.839737 c
123.6239 19.812943 125.52032 19.299545 127.61582 19.299545 c
129.75323 19.299545 131.66014 19.812943 133.33653 20.839737 c
135.01294 21.866533 136.3331 23.270517 137.29703 25.051691 c
138.26096 26.832865 138.74292 28.855022 138.74292 31.11816 c
138.74292 33.33939 138.26096 35.340591 137.29703 37.121765 c
136.3331 38.902939 135.01294 40.306923 133.33653 41.333717 c
131.66014 42.360512 129.75323 42.873909 127.61582 42.873909 c
h
S
Q
1 0.80000001 0.40000001 sc
q
42.428867 44.934071 m
31.567692 45.183647 19.43169 33.572124 12.026342 23.339481 c
16.222706 19.096678 23.275709 15.342082 29.693676 15.092505 c
43.023304 14.343776 54.524273 24.718357 55.758495 37.945923 c
52.796356 41.939148 49.093681 44.684494 42.428867 44.934071 c
h
W
0 0 235 71 rc
7.0263424 49.938023 m
60.758495 49.938023 l
60.758495 10.054385 l
7.0263424 10.054385 l
h
f
Q
1 0.4627451 0.4509804 sc
q
55.325203 34.499981 m
52.699432 32.016743 50.486511 30.172726 44.562771 29.996204 c
38.639034 29.819683 28.923357 36.069954 18.573034 39.121063 c
13.019202 40.646614 8.9020748 36.747639 6.3776059 32.933754 c
9.4069681 23.017656 18.242609 15.644147 29.097826 15.13563 c
41.467724 14.118593 52.800735 22.549809 55.325203 34.499981 c
h
W
0 0 235 71 rc
1.3776058 44.460079 m
60.325203 44.460079 l
60.325203 10.052573 l
1.3776058 10.052573 l
h
f
Q
1 0.62536848 0.4509804 sc
q
24.655201 37.004692 m
32.135021 34.171978 38.060314 31.055981 42.713776 30.263639 c
48.530972 29.273151 52.321049 32.098286 55.092278 34.398769 c
53.931686 28.705168 50.957504 23.719973 46.880463 20.098749 c
46.651447 19.897909 l
42.419697 16.252325 37.054386 14.03281 31.269417 13.96279 c
30.555929 13.956441 29.836412 13.983552 29.112547 14.04523 c
28.8957 14.055758 28.679661 14.069125 28.464458 14.085299 c
22.363586 14.727506 15.88555 18.410244 11.935234 22.539618 c
15.17553 27.523266 19.583611 32.71521 24.459291 36.840641 c
h
W
0 0 235 71 rc
6.9352336 42.004692 m
60.092278 42.004692 l
60.092278 8.9618864 l
6.9352336 8.9618864 l
h
f
Q
0 0.60000002 0.60000002 sc
q
57.822559 19.518768 m
67.998062 10.392801 l
70.10643 8.5018826 70.277061 5.2705507 68.379433 3.1704717 c
66.505394 1.0964875 63.30872 0.90681475 61.200748 2.729635 c
61.129971 2.7919636 l
50.384224 12.431003 l
53.20591 14.4107 55.714798 16.802622 57.822559 19.518768 c
h
W
0 0 235 71 rc
45.384224 24.518768 m
74.69812 24.518768 l
74.69812 -3.5208039 l
45.384224 -3.5208039 l
h
f
Q
q
31.960964 65.726112 m
45.949451 64.885796 56.300934 52.841236 55.741394 39.116039 c
54.902084 25.110735 42.871986 14.746812 29.163267 15.307024 c
15.174779 16.147343 4.8232975 28.191902 5.3828368 41.917099 c
5.9423766 55.642296 18.252247 66.286331 31.960964 65.726112 c
32.332664 70.94902 m
15.58018 71.863274 0.95982814 59.063644 0.04605617 42.302219 c
-0.86771584 25.540794 11.925092 10.912642 28.677578 9.9983816 c
45.430065 9.0841217 59.745827 21.883755 60.964188 38.64518 c
62.182552 55.406605 49.085152 69.730003 32.332664 70.94902 c
h
W
0 0 235 71 rc
-5 75.995102 m
66.042801 75.995102 l
66.042801 4.9523005 l
-5 4.9523005 l
h
f
ep
end
%%Trailer
%%EOF
